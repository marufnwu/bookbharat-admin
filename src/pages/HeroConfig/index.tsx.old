import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import {
  PlusIcon,
  PencilIcon,
  TrashIcon,
  EyeIcon,
  CheckCircleIcon,
  XCircleIcon,
  XMarkIcon,
} from '@heroicons/react/24/outline';
import { Button, LoadingSpinner, Badge, Input } from '../../components';
import { useNotificationStore } from '../../store/notificationStore';
import api from '../../api/axios';

interface HeroConfig {
  id: number;
  variant: string;
  title: string;
  subtitle: string;
  primaryCta: {
    text: string;
    href: string;
  } | null;
  secondaryCta: {
    text: string;
    href: string;
  } | null;
  discountBadge: {
    text: string;
    color: string;
  } | null;
  trustBadges: string[] | null;
  backgroundImage: string | null;
  testimonials: any[] | null;
  campaignData: any | null;
  categories: any[] | null;
  features: any[] | null;
  stats: any[] | null;
  featuredProducts: any[] | null;
  videoUrl: string | null;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

const HeroConfig: React.FC = () => {
  const [selectedConfig, setSelectedConfig] = useState<HeroConfig | null>(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editFormData, setEditFormData] = useState<any>({});

  const queryClient = useQueryClient();
  const { showSuccess, showError } = useNotificationStore();

  // Fetch hero configurations
  const { data: configsResponse, isLoading } = useQuery({
    queryKey: ['hero-configs'],
    queryFn: async () => {
      const response = await api.get('/hero-config');
      return response.data;
    },
  });

  // Set active mutation
  const setActiveMutation = useMutation({
    mutationFn: async (variant: string) => {
      const response = await api.post('/hero-config/set-active', { variant });
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['hero-configs'] });
      showSuccess('Active hero variant updated successfully');
    },
    onError: (error: any) => {
      showError('Failed to set active variant', error.response?.data?.message);
    },
  });

  // Update mutation
  const updateMutation = useMutation({
    mutationFn: async ({ variant, data }: { variant: string; data: any }) => {
      const response = await api.put(`/hero-config/${variant}`, data);
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['hero-configs'] });
      showSuccess('Hero configuration updated successfully');
      setShowEditModal(false);
      setEditFormData({});
    },
    onError: (error: any) => {
      showError('Failed to update configuration', error.response?.data?.message);
    },
  });

  // Delete mutation
  const deleteMutation = useMutation({
    mutationFn: async (variant: string) => {
      const response = await api.delete(`/hero-config/${variant}`);
      return response.data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['hero-configs'] });
      showSuccess('Hero configuration deleted successfully');
    },
    onError: (error: any) => {
      showError('Failed to delete configuration', error.response?.data?.message);
    },
  });

  const handleSetActive = (variant: string) => {
    setActiveMutation.mutate(variant);
  };

  const handleDelete = (variant: string, isActive: boolean) => {
    if (isActive) {
      showError('Cannot delete active configuration', 'Please set another variant as active first');
      return;
    }
    if (window.confirm(`Are you sure you want to delete the "${variant}" configuration?`)) {
      deleteMutation.mutate(variant);
    }
  };

  const handleViewDetails = (config: HeroConfig) => {
    setSelectedConfig(config);
    setShowDetailModal(true);
  };

  const handleEdit = (config: HeroConfig) => {
    setSelectedConfig(config);
    setEditFormData({
      title: config.title,
      subtitle: config.subtitle || '',
      primaryCta: config.primaryCta || { text: '', href: '' },
      secondaryCta: config.secondaryCta || { text: '', href: '' },
    });
    setShowEditModal(true);
  };

  const handleUpdateSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedConfig) return;

    updateMutation.mutate({
      variant: selectedConfig.variant,
      data: editFormData,
    });
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  const configs: HeroConfig[] = configsResponse?.data || [];
  const activeConfig = configs.find(c => c.is_active);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-semibold text-gray-900">Hero Configuration</h1>
          <p className="mt-1 text-sm text-gray-500">
            Manage homepage hero sections and variants
          </p>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 gap-5 sm:grid-cols-4">
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="flex items-center justify-center h-12 w-12 rounded-md bg-blue-500 text-white">
                  <span className="text-xl font-bold">{configs.length}</span>
                </div>
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">Total Variants</dt>
                  <dd className="text-lg font-semibold text-gray-900">{configs.length} configs</dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <CheckCircleIcon className="h-12 w-12 text-green-500" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">Active Variant</dt>
                  <dd className="text-lg font-semibold text-gray-900 truncate">
                    {activeConfig?.variant || 'None'}
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="flex items-center justify-center h-12 w-12 rounded-md bg-purple-500 text-white">
                  <span className="text-xl font-bold">
                    {configs.filter(c => c.features && c.features.length > 0).length}
                  </span>
                </div>
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">With Features</dt>
                  <dd className="text-lg font-semibold text-gray-900">
                    {configs.filter(c => c.features && c.features.length > 0).length} variants
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <div className="flex items-center justify-center h-12 w-12 rounded-md bg-orange-500 text-white">
                  <span className="text-xl font-bold">
                    {configs.filter(c => c.stats && c.stats.length > 0).length}
                  </span>
                </div>
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">With Stats</dt>
                  <dd className="text-lg font-semibold text-gray-900">
                    {configs.filter(c => c.stats && c.stats.length > 0).length} variants
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Configurations Table */}
      <div className="bg-white shadow overflow-hidden sm:rounded-md">
        <ul className="divide-y divide-gray-200">
          {configs.map((config) => (
            <li key={config.id}>
              <div className="px-4 py-4 sm:px-6 hover:bg-gray-50">
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center space-x-3">
                      <h3 className="text-lg font-medium text-gray-900 truncate">
                        {config.title}
                      </h3>
                      {config.is_active && (
                        <Badge variant="success">
                          <CheckCircleIcon className="h-4 w-4 mr-1" />
                          Active
                        </Badge>
                      )}
                    </div>
                    <div className="mt-1 flex items-center space-x-4 text-sm text-gray-500">
                      <span className="font-mono font-medium">{config.variant}</span>
                      {config.subtitle && (
                        <span className="truncate max-w-md">{config.subtitle}</span>
                      )}
                    </div>
                    <div className="mt-2 flex items-center space-x-2">
                      {config.features && config.features.length > 0 && (
                        <Badge variant="info">{config.features.length} Features</Badge>
                      )}
                      {config.stats && config.stats.length > 0 && (
                        <Badge variant="warning">{config.stats.length} Stats</Badge>
                      )}
                      {config.testimonials && config.testimonials.length > 0 && (
                        <Badge variant="secondary">{config.testimonials.length} Testimonials</Badge>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center space-x-2 ml-4">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleViewDetails(config)}
                    >
                      <EyeIcon className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleEdit(config)}
                    >
                      <PencilIcon className="h-4 w-4" />
                    </Button>
                    {!config.is_active && (
                      <Button
                        variant="primary"
                        size="sm"
                        onClick={() => handleSetActive(config.variant)}
                        isLoading={setActiveMutation.isPending}
                      >
                        <CheckCircleIcon className="h-4 w-4 mr-1" />
                        Set Active
                      </Button>
                    )}
                    <Button
                      variant="danger"
                      size="sm"
                      onClick={() => handleDelete(config.variant, config.is_active)}
                      disabled={config.is_active}
                      isLoading={deleteMutation.isPending}
                    >
                      <TrashIcon className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            </li>
          ))}
        </ul>

        {configs.length === 0 && (
          <div className="text-center py-12">
            <p className="text-gray-500">No hero configurations found</p>
          </div>
        )}
      </div>

      {/* Detail Modal */}
      {showDetailModal && selectedConfig && (
        <div className="fixed z-10 inset-0 overflow-y-auto">
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => setShowDetailModal(false)} />

            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-3xl sm:w-full">
              <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div className="flex items-start justify-between mb-4">
                  <h3 className="text-lg font-medium text-gray-900">{selectedConfig.title}</h3>
                  <button
                    onClick={() => setShowDetailModal(false)}
                    className="text-gray-400 hover:text-gray-500"
                  >
                    <XMarkIcon className="h-6 w-6" />
                  </button>
                </div>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700">Variant</label>
                    <p className="mt-1 text-sm text-gray-900">{selectedConfig.variant}</p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700">Subtitle</label>
                    <p className="mt-1 text-sm text-gray-900">{selectedConfig.subtitle || 'N/A'}</p>
                  </div>

                  {selectedConfig.primaryCta && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Primary CTA</label>
                      <p className="mt-1 text-sm text-gray-900">
                        {selectedConfig.primaryCta.text} → {selectedConfig.primaryCta.href}
                      </p>
                    </div>
                  )}

                  {selectedConfig.features && selectedConfig.features.length > 0 && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Features</label>
                      <div className="space-y-2">
                        {selectedConfig.features.map((feature: any, idx: number) => (
                          <div key={idx} className="bg-gray-50 p-3 rounded">
                            <p className="font-medium text-sm">{feature.title}</p>
                            <p className="text-xs text-gray-600">{feature.description}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                  {selectedConfig.stats && selectedConfig.stats.length > 0 && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Stats</label>
                      <div className="grid grid-cols-2 gap-2">
                        {selectedConfig.stats.map((stat: any, idx: number) => (
                          <div key={idx} className="bg-gray-50 p-3 rounded">
                            <p className="text-lg font-bold">{stat.value}</p>
                            <p className="text-xs text-gray-600">{stat.label}</p>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </div>

              <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                <Button onClick={() => setShowDetailModal(false)} variant="outline">
                  Close
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Edit Modal */}
      {showEditModal && selectedConfig && (
        <div className="fixed z-10 inset-0 overflow-y-auto">
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={() => setShowEditModal(false)} />

            <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
              <form onSubmit={handleUpdateSubmit}>
                <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <h3 className="text-lg font-medium text-gray-900">Edit Hero Configuration</h3>
                    <button
                      type="button"
                      onClick={() => setShowEditModal(false)}
                      className="text-gray-400 hover:text-gray-500"
                    >
                      <XMarkIcon className="h-6 w-6" />
                    </button>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700">Variant</label>
                      <p className="mt-1 text-sm text-gray-500">{selectedConfig.variant}</p>
                    </div>

                    <Input
                      label="Title"
                      value={editFormData.title || ''}
                      onChange={(e) => setEditFormData({ ...editFormData, title: e.target.value })}
                      required
                    />

                    <div>
                      <label className="block text-sm font-medium text-gray-700">Subtitle</label>
                      <textarea
                        className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                        rows={3}
                        value={editFormData.subtitle || ''}
                        onChange={(e) => setEditFormData({ ...editFormData, subtitle: e.target.value })}
                      />
                    </div>

                    <div className="space-y-2">
                      <label className="block text-sm font-medium text-gray-700">Primary CTA</label>
                      <Input
                        placeholder="Button Text"
                        value={editFormData.primaryCta?.text || ''}
                        onChange={(e) => setEditFormData({
                          ...editFormData,
                          primaryCta: { ...editFormData.primaryCta, text: e.target.value }
                        })}
                      />
                      <Input
                        placeholder="Button Link"
                        value={editFormData.primaryCta?.href || ''}
                        onChange={(e) => setEditFormData({
                          ...editFormData,
                          primaryCta: { ...editFormData.primaryCta, href: e.target.value }
                        })}
                      />
                    </div>
                  </div>
                </div>

                <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse gap-3">
                  <Button
                    type="submit"
                    variant="primary"
                    isLoading={updateMutation.isPending}
                  >
                    Save Changes
                  </Button>
                  <Button
                    type="button"
                    onClick={() => setShowEditModal(false)}
                    variant="outline"
                  >
                    Cancel
                  </Button>
                </div>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default HeroConfig;
