// API Response Types
export interface ApiResponse<T = any> {
  data: T;
  message: string;
  success: boolean;
  errors?: Record<string, string[]>;
}

export interface PaginatedResponse<T> {
  data: T[];
  meta: {
    current_page: number;
    from: number;
    last_page: number;
    per_page: number;
    to: number;
    total: number;
  };
  links: {
    first: string;
    last: string;
    prev: string | null;
    next: string | null;
  };
}

// Auth Types
export interface User {
  id: number;
  name: string;
  email: string;
  email_verified_at: string | null;
  created_at: string;
  updated_at: string;
  roles?: Role[];
}

export interface Role {
  id: number;
  name: string;
  guard_name: string;
  permissions?: Permission[];
}

export interface Permission {
  id: number;
  name: string;
  guard_name: string;
}

export interface LoginCredentials {
  email: string;
  password: string;
}

export interface AuthResponse {
  user: User;
  token: string;
  expires_at: string;
}

// Product Types
export interface Product {
  id: number;
  title: string;
  slug: string;
  description: string;
  short_description: string;
  sku: string;
  price: number;
  sale_price: number | null;
  status: 'active' | 'inactive' | 'draft';
  stock_quantity: number;
  manage_stock: boolean;
  featured: boolean;
  weight: number | null;
  dimensions: string | null;
  category_id: number;
  brand_id: number | null;
  created_at: string;
  updated_at: string;
  category?: Category;
  brand?: Brand;
  images?: ProductImage[];
  variants?: ProductVariant[];
}

export interface ProductImage {
  id: number;
  product_id: number;
  image_path: string;
  image_url?: string; // Generated by backend accessor
  alt_text: string | null;
  sort_order: number;
  is_primary: boolean;
}

export interface ProductVariant {
  id: number;
  product_id: number;
  sku: string;
  price: number;
  sale_price: number | null;
  stock_quantity: number;
  attributes: Record<string, string>;
}

export interface Category {
  id: number;
  name: string;
  slug: string;
  description: string | null;
  parent_id: number | null;
  sort_order: number;
  is_active: boolean;
  created_at: string;
  updated_at: string;
  children?: Category[];
  parent?: Category;
}

export interface Brand {
  id: number;
  name: string;
  slug: string;
  description: string | null;
  logo: string | null;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

// Order Types
export interface Order {
  id: number;
  order_number: string;
  user_id: number | null;
  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled' | 'refunded';
  payment_status: 'pending' | 'paid' | 'failed' | 'refunded' | 'partially_refunded';
  total_amount: number;
  tax_amount: number;
  shipping_amount: number;
  discount_amount: number;
  subtotal: number;
  currency: string;
  notes: string | null;
  shipped_at: string | null;
  delivered_at: string | null;
  created_at: string;
  updated_at: string;
  user?: User;
  items?: OrderItem[];
  shipping_address?: Address;
  billing_address?: Address;
  payment?: Payment;
}

export interface OrderItem {
  id: number;
  order_id: number;
  product_id: number;
  product_variant_id: number | null;
  quantity: number;
  price: number;
  total: number;
  product?: Product;
  variant?: ProductVariant;
}

export interface Address {
  id: number;
  user_id: number | null;
  type: 'shipping' | 'billing';
  first_name: string;
  last_name: string;
  company: string | null;
  address_line_1: string;
  address_line_2: string | null;
  city: string;
  state: string;
  postal_code: string;
  country: string;
  phone: string | null;
}

export interface Payment {
  id: number;
  order_id: number;
  payment_method: string;
  payment_gateway: string;
  transaction_id: string | null;
  amount: number;
  status: 'pending' | 'completed' | 'failed' | 'cancelled' | 'refunded';
  gateway_response: Record<string, any> | null;
  created_at: string;
  updated_at: string;
}

// Dashboard Types
export interface DashboardStats {
  total_orders: number;
  total_revenue: number;
  total_products: number;
  total_customers: number;
  pending_orders: number;
  low_stock_products: number;
}

export interface RevenueData {
  date: string;
  revenue: number;
  orders: number;
}

export interface TopProduct {
  id: number;
  title: string;
  total_sold: number;
  revenue: number;
}

// Customer Types
export interface Customer {
  id: number;
  name: string;
  email: string;
  phone: string | null;
  date_of_birth: string | null;
  gender: 'male' | 'female' | 'other' | null;
  email_verified_at: string | null;
  total_orders: number;
  total_spent: number;
  average_order_value: number;
  last_order_date: string | null;
  created_at: string;
  updated_at: string;
  addresses?: Address[];
  orders?: Order[];
}

// Table Types
export interface TableColumn<T = any> {
  key: keyof T | 'actions';
  title: string;
  sortable?: boolean;
  render?: (value: any, record: T) => React.ReactNode;
}

export interface TableProps<T = any> {
  data: T[];
  columns: TableColumn<T>[];
  loading?: boolean;
  pagination?: {
    current: number;
    total: number;
    pageSize: number;
    onChange: (page: number) => void;
  };
  onSort?: (key: string, direction: 'asc' | 'desc') => void;
}

// Form Types
export interface FormField {
  name: string;
  label: string;
  type: 'text' | 'email' | 'password' | 'number' | 'textarea' | 'select' | 'checkbox' | 'file';
  placeholder?: string;
  required?: boolean;
  options?: { value: string | number; label: string }[];
  validation?: any;
}

// Filter Types
export interface FilterOptions {
  search?: string;
  status?: string;
  payment_status?: string;
  category_id?: number;
  brand_id?: number;
  date_from?: string;
  date_to?: string;
  sort_by?: string;
  sort_direction?: 'asc' | 'desc';
  page?: number;
  per_page?: number;
}

// Notification Types
export interface Notification {
  id: string;
  type: 'success' | 'error' | 'warning' | 'info';
  title: string;
  message: string;
  duration?: number;
}